// Test vectors taken from https://tools.ietf.org/html/rfc7748
package dh_test

import (
	"testing"

	"github.com/stretchr/testify/require"
	. "github.com/yyforyongyu/noise/dh"
)

func TestGenerateKeyPair448(t *testing.T) {

	var (
		priv = [56]byte{
			0x9a, 0x8f, 0x49, 0x25, 0xd1, 0x51, 0x9f, 0x57,
			0x75, 0xcf, 0x46, 0xb0, 0x4b, 0x58, 0x0, 0xd4,
			0xee, 0x9e, 0xe8, 0xba, 0xe8, 0xbc, 0x55, 0x65,
			0xd4, 0x98, 0xc2, 0x8d, 0xd9, 0xc9, 0xba, 0xf5,
			0x74, 0xa9, 0x41, 0x97, 0x44, 0x89, 0x73, 0x91,
			0x0, 0x63, 0x82, 0xa6, 0xf1, 0x27, 0xab, 0x1d,
			0x9a, 0xc2, 0xd8, 0xc0, 0xa5, 0x98, 0x72, 0x6b,
		}

		pubHex = "9b08f7cc31b7e3e67d22d5aea121074a273bd2b83de09c63faa73d2c" +
			"22c5d9bbc836647241d953d40c5b12da88120d53177f80e532c41fa0"
		pub = [56]byte{
			0x9b, 0x8, 0xf7, 0xcc, 0x31, 0xb7, 0xe3, 0xe6,
			0x7d, 0x22, 0xd5, 0xae, 0xa1, 0x21, 0x7, 0x4a,
			0x27, 0x3b, 0xd2, 0xb8, 0x3d, 0xe0, 0x9c, 0x63,
			0xfa, 0xa7, 0x3d, 0x2c, 0x22, 0xc5, 0xd9, 0xbb,
			0xc8, 0x36, 0x64, 0x72, 0x41, 0xd9, 0x53, 0xd4,
			0xc, 0x5b, 0x12, 0xda, 0x88, 0x12, 0xd, 0x53,
			0x17, 0x7f, 0x80, 0xe5, 0x32, 0xc4, 0x1f, 0xa0,
		}
	)

	// supply 32-byte entropy
	privKey, _ := X448.GenerateKeyPair(priv[:])

	require.Equal(t, priv[:], privKey.Bytes(),
		"private keys not match")
	require.Equal(t, pub[:], privKey.PubKey().Bytes(),
		"public keys not match")
	require.Equal(t, pubHex, privKey.PubKey().Hex(),
		"public key string doesn't match")

	// make an entropy greater than 32-byte. The function should only take the
	// first 32-byte.
	var extra []byte
	extra = append(extra, priv[:]...)
	extra = append(extra, byte(0x01))
	privKey, _ = X448.GenerateKeyPair(extra)

	require.Equal(t, priv[:], privKey.Bytes(),
		"private keys not match")
	require.Equal(t, pub[:], privKey.PubKey().Bytes(),
		"public keys not match")
	require.Equal(t, pubHex, privKey.PubKey().Hex(),
		"public key string doesn't match")

	// no entropy passed, it should generate a new key pair.
	privKey, _ = X448.GenerateKeyPair(nil)

	// weak check, as long as the keys changed, it'll pass
	require.NotEqual(t, priv[:], privKey.Bytes(),
		"private keys should not match")
	require.NotEqual(t, pub[:], privKey.PubKey().Bytes(),
		"public keys should not match")
	require.NotEqual(t, pubHex, privKey.PubKey().Hex(),
		"public key string should not match")

	// call it again and check that it indeed is "random"
	newprivKey, _ := X448.GenerateKeyPair(nil)
	require.NotEqual(t, privKey.Bytes(), newprivKey.Bytes(),
		"private keys should not match")
	require.NotEqual(t, privKey.PubKey().Bytes(), newprivKey.PubKey().Bytes(),
		"public keys should not match")
	require.NotEqual(t, privKey.PubKey().Hex(),
		"public key string should not match")
}

func TestCurveSetUp448(t *testing.T) {
	require.Equal(t, 56, X448.Size(), "Curve448's DHLEN must be 56")
	require.Equal(t, "448", X448.String(), "name must be 448")
}

func TestDH448(t *testing.T) {

	var (
		EMPTY []byte = nil

		alicePriv = [56]byte{
			0x9a, 0x8f, 0x49, 0x25, 0xd1, 0x51, 0x9f, 0x57,
			0x75, 0xcf, 0x46, 0xb0, 0x4b, 0x58, 0x0, 0xd4,
			0xee, 0x9e, 0xe8, 0xba, 0xe8, 0xbc, 0x55, 0x65,
			0xd4, 0x98, 0xc2, 0x8d, 0xd9, 0xc9, 0xba, 0xf5,
			0x74, 0xa9, 0x41, 0x97, 0x44, 0x89, 0x73, 0x91,
			0x0, 0x63, 0x82, 0xa6, 0xf1, 0x27, 0xab, 0x1d,
			0x9a, 0xc2, 0xd8, 0xc0, 0xa5, 0x98, 0x72, 0x6b,
		}
		alicePub = [56]byte{
			0x9b, 0x8, 0xf7, 0xcc, 0x31, 0xb7, 0xe3, 0xe6,
			0x7d, 0x22, 0xd5, 0xae, 0xa1, 0x21, 0x7, 0x4a,
			0x27, 0x3b, 0xd2, 0xb8, 0x3d, 0xe0, 0x9c, 0x63,
			0xfa, 0xa7, 0x3d, 0x2c, 0x22, 0xc5, 0xd9, 0xbb,
			0xc8, 0x36, 0x64, 0x72, 0x41, 0xd9, 0x53, 0xd4,
			0xc, 0x5b, 0x12, 0xda, 0x88, 0x12, 0xd, 0x53,
			0x17, 0x7f, 0x80, 0xe5, 0x32, 0xc4, 0x1f, 0xa0,
		}
		alicePrivKey, _ = X448.GenerateKeyPair(alicePriv[:])

		bobPriv = [56]byte{
			0x1c, 0x30, 0x6a, 0x7a, 0xc2, 0xa0, 0xe2, 0xe0,
			0x99, 0xb, 0x29, 0x44, 0x70, 0xcb, 0xa3, 0x39,
			0xe6, 0x45, 0x37, 0x72, 0xb0, 0x75, 0x81, 0x1d,
			0x8f, 0xad, 0xd, 0x1d, 0x69, 0x27, 0xc1, 0x20,
			0xbb, 0x5e, 0xe8, 0x97, 0x2b, 0xd, 0x3e, 0x21,
			0x37, 0x4c, 0x9c, 0x92, 0x1b, 0x9, 0xd1, 0xb0,
			0x36, 0x6f, 0x10, 0xb6, 0x51, 0x73, 0x99, 0x2d,
		}
		bobPub = [56]byte{
			0x3e, 0xb7, 0xa8, 0x29, 0xb0, 0xcd, 0x20, 0xf5,
			0xbc, 0xfc, 0xb, 0x59, 0x9b, 0x6f, 0xec, 0xcf,
			0x6d, 0xa4, 0x62, 0x71, 0x7, 0xbd, 0xb0, 0xd4,
			0xf3, 0x45, 0xb4, 0x30, 0x27, 0xd8, 0xb9, 0x72,
			0xfc, 0x3e, 0x34, 0xfb, 0x42, 0x32, 0xa1, 0x3c,
			0xa7, 0x6, 0xdc, 0xb5, 0x7a, 0xec, 0x3d, 0xae,
			0x7, 0xbd, 0xc1, 0xc6, 0x7b, 0xf3, 0x36, 0x9,
		}
		bobPrivKey, _ = X448.GenerateKeyPair(bobPriv[:])

		shared = [56]byte{
			0x7, 0xff, 0xf4, 0x18, 0x1a, 0xc6, 0xcc, 0x95,
			0xec, 0x1c, 0x16, 0xa9, 0x4a, 0xf, 0x74, 0xd1,
			0x2d, 0xa2, 0x32, 0xce, 0x40, 0xa7, 0x75, 0x52,
			0x28, 0x1d, 0x28, 0x2b, 0xb6, 0xc, 0xb, 0x56,
			0xfd, 0x24, 0x64, 0xc3, 0x35, 0x54, 0x39, 0x36,
			0x52, 0x1c, 0x24, 0x40, 0x30, 0x85, 0xd5, 0x9a,
			0x44, 0x9a, 0x50, 0x37, 0x51, 0x4a, 0x87, 0x9d,
		}
	)
	// when public key is wrong, an error is returned
	invalidPub := &invalid{[1]byte{byte(1)}}
	secret, err := alicePrivKey.DH(invalidPub)
	require.Equal(t, EMPTY, secret,
		"when public is wrong, no key pair should return")
	require.Equal(t, ErrMismatchedPublicKey, err,
		"wrong error returned")

	// check from Alice's view
	secret, err = alicePrivKey.DH(bobPrivKey.PubKey())
	require.Equal(t, bobPub[:], bobPrivKey.PubKey().Bytes(),
		"bob's public keys do not match")
	require.Equal(t, shared[:], secret,
		"the shared secrets from alice's DH do not match")

	// check from Bob's view
	secret, err = bobPrivKey.DH(alicePrivKey.PubKey())
	require.Equal(t, alicePub[:], alicePrivKey.PubKey().Bytes(),
		"alice's public keys do not match")
	require.Equal(t, shared[:], secret,
		"the shared secrets from bob's DH do not match")

}
